// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: participants.sql

package db

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const createParticipant = `-- name: CreateParticipant :exec
INSERT INTO participants (
    user_id,
    room_id,
    wish
) VALUES (
    $1,
    $2,
    $3
)
`

type CreateParticipantParams struct {
	UserID int64
	RoomID int64
	Wish   pgtype.Text
}

func (q *Queries) CreateParticipant(ctx context.Context, arg CreateParticipantParams) error {
	_, err := q.db.Exec(ctx, createParticipant, arg.UserID, arg.RoomID, arg.Wish)
	return err
}

const deleteParticipant = `-- name: DeleteParticipant :exec
DELETE FROM participants
WHERE id = $1
`

func (q *Queries) DeleteParticipant(ctx context.Context, id int64) error {
	_, err := q.db.Exec(ctx, deleteParticipant, id)
	return err
}

const getParticipantByID = `-- name: GetParticipantByID :one
SELECT id, user_id, room_id, wish, gives_to FROM participants
WHERE id = $1
`

func (q *Queries) GetParticipantByID(ctx context.Context, id int64) (Participant, error) {
	row := q.db.QueryRow(ctx, getParticipantByID, id)
	var i Participant
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.RoomID,
		&i.Wish,
		&i.GivesTo,
	)
	return i, err
}

const getParticipantByUserID = `-- name: GetParticipantByUserID :one
SELECT id, user_id, room_id, wish, gives_to FROM participants
WHERE user_id = $1 AND room_id = $2
`

type GetParticipantByUserIDParams struct {
	UserID int64
	RoomID int64
}

func (q *Queries) GetParticipantByUserID(ctx context.Context, arg GetParticipantByUserIDParams) (Participant, error) {
	row := q.db.QueryRow(ctx, getParticipantByUserID, arg.UserID, arg.RoomID)
	var i Participant
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.RoomID,
		&i.Wish,
		&i.GivesTo,
	)
	return i, err
}

const getUserParticipations = `-- name: GetUserParticipations :many
SELECT id, user_id, room_id, wish, gives_to FROM participants
WHERE user_id = $1
`

func (q *Queries) GetUserParticipations(ctx context.Context, userID int64) ([]Participant, error) {
	rows, err := q.db.Query(ctx, getUserParticipations, userID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Participant
	for rows.Next() {
		var i Participant
		if err := rows.Scan(
			&i.ID,
			&i.UserID,
			&i.RoomID,
			&i.Wish,
			&i.GivesTo,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateParticipiantWish = `-- name: UpdateParticipiantWish :exec
UPDATE participants
SET wish = $1
WHERE user_id = $2 AND room_id = $3
`

type UpdateParticipiantWishParams struct {
	Wish   pgtype.Text
	UserID int64
	RoomID int64
}

func (q *Queries) UpdateParticipiantWish(ctx context.Context, arg UpdateParticipiantWishParams) error {
	_, err := q.db.Exec(ctx, updateParticipiantWish, arg.Wish, arg.UserID, arg.RoomID)
	return err
}
